import discord
import random
from discord.ext import commands
from pass_gen import gen_pass
import typing
import requests
import os

intents = discord.Intents.default()
intents.message_content = True

client = discord.Client(intents=intents)

# la variabile intents contiene i permessi al bot
intents = discord.Intents.default()
# abilita il permesso a leggere i contenuti dei messaggi
intents.message_content = True

# crea un bot e passa gli intents
bot = commands.Bot(command_prefix='$', intents=intents)

# Evento che viene chiamato quando il bot è pronto
@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    print(f'Bot ID: {bot.user.id}')
    print('------')
    
    # Canale in cui il bot invierà i messaggi di aiuto (può essere cambiato)
    channel = bot.get_channel(1006831120173776906) 
    
    # Messaggio di aiuto contenente i comandi
    help_message = (
        "Ciao! Sono pronto ad aiutarti.\n"
        "Ecco alcuni comandi che puoi usare:\n"
        "```\n"
        "$poki - fa comparire un meme di un pokemon\n"
        "$mem - fa comparire un meme sui programmatori\n"
        "$ciao- saluti il bot e da una risposta\n"
        "$guess - indovina un numero\n"
        "$he - comando casual\n"
        "$on_ready - saluti il bot e da una risposta\n"
        "$add - saluti il bot e da una risposta\n"
        "```"
    )
    
    # Invia il messaggio di aiuto nel canale specificato
    await channel.send(help_message)


def get_poki_image_url():    
    url = 'https://pokeapi.co/api/v2/pokemon/pikachu' 
    res = requests.get(url)
    data = res.json()
    return data['sprites']['front_default']  # Ottiene l'URL dell'immagine del Pokémon

@bot.command()
async def poki(ctx):
    '''Una volta chiamato il comando poki, il programma richiama la funzione get_poki_image_url'''
    image_url = get_poki_image_url()
    await ctx.send(image_url)
    
@bot.command()
async def mem(ctx):
    with open('C:\\Users\\mauri\\OneDrive\\Desktop\\visual_code\\M1L3 a L5\\mem1.jpg', 'rb') as f:
        picture = discord.File(f)
        await ctx.send(file=picture)

@bot.event
async def on_ready():
    print(f"Hai fatto l'accesso come {client.user}")

@bot.event
async def on_message(message):
    if message.author == client.user:
        return
    if message.content.startswith('$ciao'):
        await message.channel.send(f"Ciao! Io sono un bot {client.user}!")
    elif message.content.startswith('$heh'):
        if len(message.content) > 4:
            count_heh = int(message.content[4:])
        else:
            count_heh = 5
        await message.channel.send("he" * count_heh)
    elif message.content.startswith('$gen_pass'):
        if len(message.content) > 9:
            pass_length = int(message.content[9:])
        else:
            pass_length = 12  # Lunghezza predefinita della password
        password = gen_pass(pass_length)
        await message.channel.send(f"La password generata è: {password}")

@bot.command()
async def joined(ctx, member: discord.Member):
    """Says when a member joined."""
    await ctx.send(f'{member.name} joined {discord.utils.format_dt(member.joined_at)}')

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user} (ID: {bot.user.id})')
    print('------')


@bot.command()
async def add(ctx, left: int, right: int):
    # Comando per fare una domanda al bot
    async def ask(ctx):
        """Ask the bot a question."""
        await ctx.send("")
    
    """Adds two numbers together."""
    # Calcola la somma dei due numeri
    result = left + right
    # Invia il risultato nel canale in cui è stato inviato il comando
    await ctx.send(f'Il risultato di {left} + {right} è: {result}')
    
class MyClient(discord.Client):
    async def on_ready(self):
        print(f'Logged in as {self.user} (ID: {self.user.id})')
        print('------')

    async def on_message(self, message):
        # we do not want the bot to reply to itself
        if message.author.id == self.user.id:
            return

        if message.content.startswith('$guess'):
            await message.channel.send('Guess a number between 1 and 10.')

            def is_correct(m):
                return m.author == message.author and m.content.isdigit()

            answer = random.randint(1, 10)

            try:
                guess = await self.wait_for('message', check=is_correct, timeout=5.0)
            except asyncio.TimeoutError:
                return await message.channel.send(f'Sorry, you took too long it was {answer}.')

            if int(guess.content) == answer:
                await message.channel.send('You are right!')
            else:
                await message.channel.send(f'Oops. It is actually {answer}.')


intents = discord.Intents.default()
intents.message_content = True

client = MyClient(intents=intents)
bot.run('token')
